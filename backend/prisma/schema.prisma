generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  phoneNumber String     @unique
  balance     Float      @default(0.0)
  role        UserRole
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  Event       Event[]
  OTP         OTP[]
  portfolio   Portfolio?
  events      Event[]    @relation("EventParticipants")
}

model Portfolio {
  id              String   @id @default(cuid())
  userId          String   @unique
  currentBalances Float    @default(0.0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  trades          Trade[]
}

model Event {
  id           String      @id @default(cuid())
  title        String
  description  String
  adminId      String
  status       EventStatus @default(ONGOING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  admin        User        @relation(fields: [adminId], references: [id])
  orderBook    OrderBook?
  Trade        Trade[]
  participants User[]      @relation("EventParticipants")
}

model OrderBook {
  id      String     @id @default(cuid())
  eventId String     @unique
  no      NoOrder[]
  event   Event      @relation(fields: [eventId], references: [id])
  yes     YesOrder[]
}

model YesOrder {
  id          String    @id @default(cuid())
  orderBookId String
  price       Float
  quantity    Int
  createdAt   DateTime  @default(now())
  type        OrderType
  orderBook   OrderBook @relation(fields: [orderBookId], references: [id])
}

model NoOrder {
  id          String    @id @default(cuid())
  orderBookId String
  price       Float
  quantity    Int
  createdAt   DateTime  @default(now())
  type        OrderType
  orderBook   OrderBook @relation(fields: [orderBookId], references: [id])
}

model Trade {
  id          String      @id @default(cuid())
  portfolioId String
  eventId     String
  price       Float
  quantity    Int
  side        TradeSide
  createdAt   DateTime    @default(now())
  gainloss    Float?      @default(0)
  status      TradeStatus @default(ACTIVE)
  event       Event       @relation(fields: [eventId], references: [id])
  portfolio   Portfolio   @relation(fields: [portfolioId], references: [id])
}

model OTP {
  id         String   @id @default(uuid())
  userId     String?
  otp        String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  otpID      String   @unique
  isVerified Boolean  @default(false)
  user       User?    @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

enum EventStatus {
  ONGOING
  ENDED
}

enum TradeSide {
  YES
  NO
}

enum PayoutStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TradeStatus {
  ACTIVE
  PAST
}

enum OrderType {
  BUY
  SELL
}
